{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e8706aee-5ec5-441d-bc31-be95f33965e5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Database and 'reviews' table created.\n"
     ]
    },
    {
     "ename": "ProgrammingError",
     "evalue": "Cannot operate on a closed database.",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mProgrammingError\u001b[0m                          Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[6], line 46\u001b[0m\n\u001b[0;32m     41\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m✅ Database and \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mreviews\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m table created.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     45\u001b[0m \u001b[38;5;66;03m# Step 2: Create a table named 'reviews' if it doesn't already exist\u001b[39;00m\n\u001b[1;32m---> 46\u001b[0m \u001b[43mcursor\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mexecute\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\"\"\u001b[39;49m\n\u001b[0;32m     47\u001b[0m \u001b[38;5;124;43mCREATE TABLE IF NOT EXISTS reviews (\u001b[39;49m\n\u001b[0;32m     48\u001b[0m \u001b[38;5;124;43m    driver_id INTEGER,\u001b[39;49m\n\u001b[0;32m     49\u001b[0m \u001b[38;5;124;43m    review TEXT\u001b[39;49m\n\u001b[0;32m     50\u001b[0m \u001b[38;5;124;43m)\u001b[39;49m\n\u001b[0;32m     51\u001b[0m \u001b[38;5;124;43m\"\"\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[0;32m     52\u001b[0m conn\u001b[38;5;241m.\u001b[39mcommit()\n\u001b[0;32m     54\u001b[0m \u001b[38;5;66;03m# Step 3: Insert a review for driver_id 1\u001b[39;00m\n",
      "\u001b[1;31mProgrammingError\u001b[0m: Cannot operate on a closed database."
     ]
    }
   ],
   "source": [
    "import sqlite3\n",
    "\n",
    "# Step 1: Connect to or create the database\n",
    "conn = sqlite3.connect('driver_reviews.db')\n",
    "cursor = conn.cursor()\n",
    "\n",
    "# Step 2: Create the 'reviews' table with driver_id and review\n",
    "cursor.execute(\"\"\"\n",
    "CREATE TABLE IF NOT EXISTS reviews (\n",
    "    driver_id INTEGER,\n",
    "    review TEXT,\n",
    "    PRIMARY KEY (driver_id, review)\n",
    ")\n",
    "\"\"\")\n",
    "conn.commit()\n",
    "\n",
    "# Step 3: Sample reviews to insert\n",
    "sample_reviews = [\n",
    "    (1, \"Very smooth and comfortable ride.\"),\n",
    "    (2, \"Fast and professional driver.\"),\n",
    "    (3, \"The car was clean and the ride was pleasant.\"),\n",
    "    (4, \"Little late, but very polite.\"),\n",
    "    (5, \"Amazing experience, will book again!\")\n",
    "]\n",
    "\n",
    "# Step 4: Insert them, avoiding duplicates\n",
    "for driver_id, review in sample_reviews:\n",
    "    try:\n",
    "        cursor.execute(\"INSERT INTO reviews (driver_id, review) VALUES (?, ?)\", (driver_id, review))\n",
    "    except sqlite3.IntegrityError:\n",
    "        pass  # Already exists, skip\n",
    "\n",
    "# Step 5: Save and close the connection\n",
    "conn.commit()\n",
    "conn.close()\n",
    "\n",
    "print(\"✅ Database and 'reviews' table created with sample data.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d4697828-9d13-433a-ae91-77a94878d5ff",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
